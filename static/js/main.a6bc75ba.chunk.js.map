{"version":3,"sources":["store/TodoModel.js","store/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoController.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","complited","id","this","decorate","observable","Store","todo","todoView","view","lastId","push","filterTodo","filter","sort","a","b","addTodo","action","TodoEntry","state","value","event","keyCode","trim","preventDefault","setState","type","onChange","target","onKeyDown","handelKayDown","Component","observer","onToggle","props","toggle","onDelete","delete","className","class","checked","for","onClick","TodoItems","map","todoStore","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6bc75ba.chunk.js","sourcesContent":["import {observable,decorate} from 'mobx'\r\nexport default class TodoModel{\r\n    store\r\n    id\r\n    title\r\n    complited\r\n    constructor(store,title,complited,id) {\r\n        this.store= store\r\n        this.title= title\r\n        this.complited= complited\r\n        this.id= id\r\n    }\r\n    toggle(){\r\n        this.complited= !this.complited\r\n    }\r\n\r\n}\r\ndecorate(TodoModel,{\r\n    title:observable,\r\n    complited: observable\r\n})","import {observable,action,decorate} from 'mobx';\r\nimport TodoModel from './TodoModel'\r\nclass Store{\r\n    todo=[]\r\n    todoView=[]\r\n    view='all'\r\n    lastId=0\r\n    addTodo(title){\r\n        this.todo.push(new TodoModel(this,title,false,this.lastId++))\r\n        this.filterTodo()\r\n    }\r\n    delete(id){\r\n        this.todo=this.todo.filter(todo=>todo.id!==id)\r\n        this.filterTodo()\r\n    }\r\n    filterTodo(){\r\n        if(this.view==='all')\r\n        this.todoView=this.todo.sort((a,b)=>{return a.complited-b.complited})\r\n        if(this.view==='active')\r\n        this.todoView=this.todo.filter(todo=>todo.complited===false)\r\n        if(this.view==='complited')\r\n        this.todoView=this.todo.filter(todo=>todo.complited===true)\r\n    }\r\n\r\n}\r\n\r\ndecorate(Store,{\r\n    todo:observable,\r\n    todoView:observable,\r\n    view: observable,\r\n    addTodo:action\r\n})\r\nconst store=new Store();\r\n\r\nexport default store;","import React,{Component} from 'react'\r\nimport Store from '../store/TodoStore'\r\nexport default class TodoEntry extends Component{\r\n    state={\r\n        value:''\r\n    }\r\nhandelKayDown(event){\r\n    if(event.keyCode!==13 || this.state.value.trim()==='')\r\n    {\r\n        return;\r\n    }    \r\n        event.preventDefault();\r\n        Store.addTodo(this.state.value)\r\n        this.setState({value:''})\r\n}\r\n    render(){\r\n        return(\r\n            <header>\r\n            <h1>Todo</h1>\r\n            <input type=\"text\" \r\n            value={this.state.value}\r\n            onChange={event=>{\r\n                this.setState({value:event.target.value})\r\n            }}\r\n            onKeyDown={event=>this.handelKayDown(event)}\r\n            />\r\n          </header>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Store from '../store/TodoStore'\r\nexport default observer(\r\n  class TodoItems extends Component {\r\n    onToggle = () => {\r\n      this.props.todo.toggle();\r\n      Store.filterTodo()\r\n    }\r\n    onDelete=id=>{\r\n      Store.delete(id)\r\n    }\r\n    render() {\r\n      const { todo } = this.props;\r\n      return (\r\n        <li className={todo.complited ? \"complited\" : \" \"}>\r\n          <div className=\"view\">\r\n            <div class=\"round\">\r\n              <input\r\n                onChange={this.onToggle}\r\n                type=\"checkbox\"\r\n                id={todo.id}\r\n                checked={todo.complited}\r\n              />\r\n              <label for={todo.id}></label>\r\n            </div>\r\n      <label>{todo.title}</label>\r\n            <button onClick={()=>this.onDelete(todo.id)}>X</button>\r\n          </div>\r\n        </li>\r\n      );\r\n    }\r\n  },\r\n);\r\n","import React, { Component } from \"react\";\r\nimport Item from \"./TodoItem\";\r\nimport Store from '../store/TodoStore'\r\nimport {observer} from 'mobx-react'\r\n class TodoItems extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <section>\r\n        <div className=\"todo-list\">\r\n          <ul>\r\n            {\r\n              Store.todoView.map(todo=>{\r\n                return(<Item todo={todo} />)\r\n              })\r\n            }\r\n          </ul>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nconst todoStore=observer(TodoItems)\r\nexport default todoStore","import React, { Component } from \"react\";\r\nimport Store from '../store/TodoStore'\r\nimport {observer} from 'mobx-react'\r\n\r\nclass TodoItems extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <footer>\r\n        <label className=\"item-counter\">{Store.todo.filter(todo=>todo.complited===false).length+' items left'}</label>\r\n        <div className=\"controller\">\r\n          <button onClick={()=>{\r\n            Store.view='all'\r\n            Store.filterTodo()\r\n          }\r\n          } >All</button>\r\n          <button onClick={()=>{\r\n            Store.view='active'\r\n            Store.filterTodo()\r\n          }}>Active</button>\r\n          <button onClick={()=>{\r\n            Store.view='complited'\r\n            Store.filterTodo()\r\n            }}>Complited</button>\r\n        </div>\r\n        <button className={Store.todo.filter(todo=>todo.complited===true).length===0?'visibility':''}\r\n        onClick={()=>{\r\n          Store.todo.filter(todo=>todo.complited===true).map(todo=>Store.delete(todo.id))\r\n        }\r\n        }\r\n        >Clear Complited</button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TodoItems)","import React from \"react\";\r\nimport TodoEntry from \"./components/TodoEntry\";\r\nimport TodoItems from \"./components/TodoItems\";\r\nimport TodoConroller from \"./components/TodoController\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport \"./App.css\";\r\nconst App = observer(function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <TodoEntry />\r\n        <TodoItems />\r\n        <TodoConroller/>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}